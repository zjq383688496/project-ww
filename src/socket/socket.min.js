(function(g) {

if (g.z_socket) return
function getClass(da) {
	return Object.prototype.toString.call(da).match(/[A-Z][a-z]+/)[0]
}
g.z_socket = function(o) {
	function zs() {
		try {
			this.socket = new WebSocket('ws://' + o.host + ':' + o.port)
		} catch (err) {
			console.error(err)
		}
	}
	var onlist = {}
	function filter(data) {
		var da
		if (getClass(data) === 'String') da = JSON.parse(data)
		else if (getClass(data) === 'Object') da = data
		if (da) {
			for (var p in da) {
				if (onlist[p] && da[p]) {
					onlist[p](da[p])
				}
			}
		}
	}
	zs.prototype.open = function(cb) {
		getClass(cb) === 'Function' && (this.socket.onopen = cb)
		this.socket.onmessage = function(o) {
			filter(o.data)
		}
	}
	zs.prototype.close = function() {
		this.socket.close()
	}
	zs.prototype.onclose = function(cb) {
		getClass(cb) === 'Function' && (this.socket.onclose = cb)
	}
	zs.prototype.error = function(cb) {
		getClass(cb) === 'Function' && (this.socket.onerror = cb)
	}
	zs.prototype.on = function(key, cb) {
		getClass(cb) === 'Function' && (onlist[key] = cb)
	}
	zs.prototype.send = function(key, obj) {
		if (key && getClass(obj) === 'Object') {
			obj.key_name = key
			this.socket.send(JSON.stringify(obj))
		}
	}
	var socket = new zs()
	return socket
}

}(window))
